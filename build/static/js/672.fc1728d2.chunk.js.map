{"version":3,"file":"static/js/672.fc1728d2.chunk.js","mappings":"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","sources":["pages/dashboard/pages/type/Filters.jsx","pages/dashboard/pages/type/Type.jsx"],"sourcesContent":["import ConfrimAndRestBtns from \"../../../../components/tableFilters/ConfrimAndRestBtns\";\r\nimport InputsContainer from \"../../../../components/tableFilters/InputsContainer\";\r\nimport { useFormik } from \"formik\";\r\nimport Input from \"../../../../components/inputs/Input\";\r\n\r\nconst Filters = ({ filters, setFilters }) => {\r\n  const formik = useFormik({\r\n    initialValues: filters,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <InputsContainer>\r\n        <Input title=\"test filter\" />\r\n      </InputsContainer>\r\n      <InputsContainer>\r\n        <Input title=\"test filter\" />\r\n        <Input title=\"test filter\" />\r\n        <Input title=\"test filter\" />\r\n      </InputsContainer>\r\n      <ConfrimAndRestBtns\r\n        values={formik.values}\r\n        resetForm={formik.resetForm}\r\n        setFilters={setFilters}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\nimport { useCallback, useMemo, useState } from \"react\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport PopUp from \"../../../../components/popup/PopUp\";\r\nimport dateFormatter from \"./../../../../utils/dateFormatter\";\r\nimport APIClient from \"./../../../../utils/ApiClient\";\r\n\r\nimport Table from \"../../../../components/table/Table\";\r\nimport Filters from \"./Filters\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport FormContainer from \"../../../../components/formContainer/FormContainer\";\r\nimport Input from \"../../../../components/inputs/Input\";\r\nimport { imageUrl } from \"../../../../utils/axios\";\r\nconsole.log(imageUrl);\r\nconst columns = [\r\n  {\r\n    name: \"image\",\r\n    headerName: \"image\",\r\n    getCell: ({ row }) =>\r\n      row.image ? (\r\n        <img\r\n          src={\r\n            row.image.startsWith(\"http\")\r\n              ? row.image\r\n              : `${imageUrl}/${row.image}`\r\n          }\r\n          alt={row.name}\r\n          style={{\r\n            width: 50,\r\n            height: 50,\r\n            objectFit: \"cover\",\r\n            borderRadius: \"8px\",\r\n          }}\r\n        />\r\n      ) : (\r\n        <span style={{ color: \"#999\" }}>No image</span>\r\n      ),\r\n  },\r\n  {\r\n    name: \"name\",\r\n    headerName: \"name\",\r\n    sort: true,\r\n  },\r\n  {\r\n    name: \"createdAt\",\r\n    headerName: \"created at\",\r\n    getCell: ({ row, isCustomPopUpOpen, setIsCustomPopUpOpen }) =>\r\n      isCustomPopUpOpen ? (\r\n        <PopUp\r\n          isOpen={isCustomPopUpOpen}\r\n          onClose={() => setIsCustomPopUpOpen(false)}\r\n        >\r\n          <p>{dateFormatter(row.createdAt, \"fullDate\")}</p>\r\n        </PopUp>\r\n      ) : (\r\n        <p onClick={() => setIsCustomPopUpOpen(true)}>\r\n          {dateFormatter(row.createdAt, \"justYear\")}\r\n        </p>\r\n      ),\r\n    sort: true,\r\n  },\r\n  {\r\n    name: \"updatedAt\",\r\n    headerName: \"updatedAt\",\r\n    getCell: ({ row }) => dateFormatter(row.updatedAt, \"justYear\"),\r\n    hidden: true,\r\n    sort: true,\r\n  },\r\n  {\r\n    name: \"option\",\r\n    headerName: \"options\",\r\n    getCell: ({ row, setSelectedItems, setIsPopUpOpen, returnRow }) => (\r\n      <>\r\n        <i\r\n          onClick={() => {\r\n            setIsPopUpOpen(true);\r\n            setSelectedItems(new Set([row._id]));\r\n          }}\r\n          className=\"fa-solid fa-trash-can\"\r\n          title=\"delete\"\r\n        />\r\n        <i\r\n          className=\"fa-solid fa-pen-to-square icon-edit\"\r\n          title=\"update\"\r\n          onClick={() => returnRow(row)}\r\n        />\r\n      </>\r\n    ),\r\n  },\r\n];\r\n\r\nconst apiClient = new APIClient(\"types\");\r\n\r\nconst TypeTable = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [sort, setSort] = useState({});\r\n  const [selectedItems, setSelectedItems] = useState(new Set());\r\n  const [filters, setFilters] = useState({ from: \"\", to: \"\", createdBy: \"\" });\r\n  const [search, setSearch] = useState(\"\");\r\n  const [debouncedSearch] = useDebounce(search, 1000);\r\n\r\n  const queryKey = useMemo(\r\n    () => [\"types\", page, sort, filters, debouncedSearch],\r\n    [page, sort, filters, debouncedSearch]\r\n  );\r\n\r\n  const { data, isLoading } = useQuery({\r\n    queryKey,\r\n    queryFn: () => apiClient.getAll({ page, sort, filters, limit: 10, search }),\r\n    keepPreviousData: true,\r\n  });\r\n\r\n  const queryClient = useQueryClient();\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n  const addType = useMutation({\r\n    mutationKey: queryKey,\r\n    mutationFn: (formData) =>\r\n      apiClient.addData({ data: formData, isFormData: true }),\r\n  });\r\n\r\n  const updateType = useMutation({\r\n    mutationKey: queryKey,\r\n    mutationFn: (formData) =>\r\n      apiClient.updateData({\r\n        id: isUpdate?._id,\r\n        data: formData,\r\n        isFormData: true,\r\n      }),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      name: isUpdate.name || \"\",\r\n      image: null,\r\n      previewImage:\r\n        isUpdate?.image &&\r\n        (isUpdate.image.startsWith(\"http\")\r\n          ? isUpdate.image\r\n          : `${imageUrl}${isUpdate.image}`),\r\n    },\r\n    validationSchema: yup.object({\r\n      name: yup.string().min(2, \"Name must be at least 2 characters\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      const formData = new FormData();\r\n      formData.append(\"name\", values.name);\r\n      if (values.image) formData.append(\"image\", values.image);\r\n\r\n      console.log(isUpdate);\r\n      (isUpdate ? updateType : addType).mutate(formData, {\r\n        onSuccess: () => {\r\n          formik.resetForm();\r\n          queryClient.invalidateQueries({ queryKey: [\"types\"] });\r\n          setIsUpdate(false);\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleCancelForm = useCallback(() => {\r\n    setIsUpdate(false);\r\n    formik.resetForm();\r\n  }, [formik]);\r\n\r\n  return (\r\n    <div className=\"table-with-form-container\">\r\n      <FormContainer\r\n        onSubmit={formik.handleSubmit}\r\n        buttonProps={{ isSending: addType.isPending || updateType.isPending }}\r\n        header={isUpdate ? \"update type\" : \"add type\"}\r\n        isUpdate={isUpdate}\r\n        oncancel={handleCancelForm}\r\n      >\r\n        <Input\r\n          placeholder=\"Enter name\"\r\n          title=\"Name\"\r\n          name=\"name\"\r\n          value={formik.values.name}\r\n          onChange={formik.handleChange}\r\n          errorText={formik.touched.name && formik.errors.name}\r\n        />\r\n\r\n        <Input\r\n          title=\"Image\"\r\n          name=\"image\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={(e) => {\r\n            const file = e.target.files[0];\r\n            formik.setFieldValue(\"image\", file);\r\n            formik.setFieldValue(\"previewImage\", URL.createObjectURL(file));\r\n          }}\r\n        />\r\n        {console.log(formik.values.previewImage)}\r\n\r\n        {formik.values.previewImage && (\r\n          <img\r\n            src={formik.values.previewImage}\r\n            alt=\"Preview\"\r\n            style={{\r\n              width: \"100px\",\r\n              height: \"100px\",\r\n              objectFit: \"cover\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n          />\r\n        )}\r\n      </FormContainer>\r\n\r\n      <Table\r\n        colmuns={columns}\r\n        loading={isLoading}\r\n        currentPage={page}\r\n        setPage={setPage}\r\n        data={data?.data}\r\n        dataLength={data?.totalCount}\r\n        setSort={setSort}\r\n        selectedItems={selectedItems}\r\n        setSelectedItems={setSelectedItems}\r\n        delelteEndPoint=\"types\"\r\n        queryKey={\"types\"}\r\n        heading={\"types\"}\r\n        setSearch={setSearch}\r\n        returnRow={setIsUpdate}\r\n        selectable\r\n      >\r\n        <Filters filters={filters} setFilters={setFilters} />\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeTable;\r\n"],"names":["_ref","filters","setFilters","formik","useFormik","initialValues","_jsxs","_Fragment","children","_jsx","InputsContainer","Input","title","ConfrimAndRestBtns","values","resetForm","console","log","imageUrl","columns","name","headerName","getCell","row","image","src","startsWith","concat","alt","style","width","height","objectFit","borderRadius","color","sort","_ref2","isCustomPopUpOpen","setIsCustomPopUpOpen","PopUp","isOpen","onClose","dateFormatter","createdAt","onClick","_ref3","updatedAt","hidden","_ref4","setSelectedItems","setIsPopUpOpen","returnRow","Set","_id","className","apiClient","APIClient","TypeTable","page","setPage","useState","setSort","selectedItems","from","to","createdBy","search","setSearch","debouncedSearch","useDebounce","queryKey","useMemo","data","isLoading","useQuery","queryFn","getAll","limit","keepPreviousData","queryClient","useQueryClient","isUpdate","setIsUpdate","addType","useMutation","mutationKey","mutationFn","formData","addData","isFormData","updateType","updateData","id","enableReinitialize","previewImage","validationSchema","yup","min","onSubmit","FormData","append","mutate","onSuccess","invalidateQueries","handleCancelForm","useCallback","FormContainer","handleSubmit","buttonProps","isSending","isPending","header","oncancel","placeholder","value","onChange","handleChange","errorText","touched","errors","type","accept","e","file","target","files","setFieldValue","URL","createObjectURL","Table","colmuns","loading","currentPage","dataLength","totalCount","delelteEndPoint","heading","selectable","Filters"],"sourceRoot":""}