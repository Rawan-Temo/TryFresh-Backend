{"version":3,"file":"static/js/714.800711e9.chunk.js","mappings":"8JACA,MAQA,EARoBA,EAAAA,GAAW,CAC7BC,SAAUD,EAAAA,KACPE,IAAI,EAAG,0CACPC,SAAS,wBACZC,SAAUJ,EAAAA,KACPE,IAAI,EAAG,0CACPC,SAAS,0B,qDCEd,MAgDA,EAhDcE,KACZ,MAAMC,GAAMC,EAAAA,EAAAA,OACN,MAAEC,IAAUC,EAAAA,EAAAA,KAEZC,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,YAAa,CAAC,QACdC,WAAYC,UACV,MAAM,KAAEC,SAAeC,EAAAA,EAAcC,KAAK,cAAeC,GACzD,OAAOH,GAETI,UAAYJ,IACVP,EAAMO,GACNT,EAAI,iBAGFc,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbrB,SAAU,GACVG,SAAU,IAEZmB,iBAAkBC,EAClBC,SAAWP,GAAWR,EAASgB,OAAOR,KAGxC,OACES,EAAAA,EAAAA,MAAA,QAAMC,UAAU,kBAAkBH,SAAUL,EAAOS,aAAaC,SAAA,EAC9DC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,MAAM,WACNC,YAAY,sBACZC,MAAOf,EAAOF,OAAOjB,SACrBmC,SAAUhB,EAAOiB,aACjBC,UAAWlB,EAAOmB,QAAQtC,UAAYmB,EAAOoB,OAAOvC,SACpDwC,KAAK,cAEPV,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,MAAM,WACNS,KAAK,WACLR,YAAY,sBACZC,MAAOf,EAAOF,OAAOd,SACrBgC,SAAUhB,EAAOiB,aACjBC,UAAWlB,EAAOmB,QAAQnC,UAAYgB,EAAOoB,OAAOpC,SACpDqC,KAAK,cAEPV,EAAAA,EAAAA,KAAA,UAAQH,UAAU,MAAKE,SAAC,a,yKCrCxBE,EAAQW,IAQP,IARQ,MACbV,EAAK,WACLW,EAAU,UACVN,EAAS,gBACTO,EAAe,eACfC,EAAc,YACdC,GAEDJ,EADIK,GAAKC,EAAAA,EAAAA,GAAAN,EAAAO,GAER,MAAMC,GAAwBC,EAAAA,EAAAA,SAAQ,IAC9B,GAANC,OAAUf,EAAY,cAAgB,GAAE,KAAAe,QACxB,OAAdP,QAAc,IAAdA,OAAc,EAAdA,EAAgBlB,YAAa,IAE9B,CAACU,EAAWQ,IAEf,OACEnB,EAAAA,EAAAA,MAAA,OAAA2B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASR,GAAc,IAAElB,UAAWuB,EAAwB,MAAMrB,SAAA,CAC/DG,IACCF,EAAAA,EAAAA,KAAA,SAAAuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAOC,QAASP,EAAMP,MAAUG,GAAU,IAAAd,SACvCG,KAGY,aAAhBc,GACChB,EAAAA,EAAAA,KAAA,YAAAuB,EAAAA,EAAAA,GAAA,CAAUE,GAAIR,EAAMP,KAAMC,KAAK,QAAWM,KAE1CjB,EAAAA,EAAAA,KAAA,SAAAuB,EAAAA,EAAAA,GAAA,CAAOE,GAAIR,EAAMP,KAAMC,KAAK,QAAWM,IAGxCV,IACCP,EAAAA,EAAAA,KAAA,KAAAuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAG1B,UAAU,aAAgBiB,GAAe,IAAAf,SACzCQ,UAOX,GAAemB,EAAAA,EAAAA,MAAKzB,E","sources":["schemas/loginSchema.js","pages/login/Login.jsx","components/inputs/Input.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\nconst loginSchema = Yup.object({\r\n  username: Yup.string()\r\n    .min(3, \"Username must be at least 3 characters\")\r\n    .required(\"Username is required\"),\r\n  password: Yup.string()\r\n    .min(3, \"Password must be at least 3 characters\")\r\n    .required(\"Password is required\"),\r\n});\r\nexport default loginSchema;\r\n","import { useFormik } from \"formik\";\r\nimport Input from \"../../components/inputs/Input\";\r\nimport loginSchema from \"./../../schemas/loginSchema\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport axiosInstance from \"../../utils/axios\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport \"./login.css\";\r\n\r\nconst Login = () => {\r\n  const nav = useNavigate();\r\n  const { login } = useAuth();\r\n\r\n  const mutation = useMutation({\r\n    mutationKey: [\"user\"],\r\n    mutationFn: async (values) => {\r\n      const { data } = await axiosInstance.post(\"users/login\", values);\r\n      return data;\r\n    },\r\n    onSuccess: (data) => {\r\n      login(data);\r\n      nav(\"/dashboard\");\r\n    },\r\n  });\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: loginSchema,\r\n    onSubmit: (values) => mutation.mutate(values),\r\n  });\r\n\r\n  return (\r\n    <form className=\"login-form flex\" onSubmit={formik.handleSubmit}>\r\n      <Input\r\n        title=\"username\"\r\n        placeholder=\"Enter your username\"\r\n        value={formik.values.username}\r\n        onChange={formik.handleChange}\r\n        errorText={formik.touched.username && formik.errors.username}\r\n        name=\"username\"\r\n      />\r\n      <Input\r\n        title=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Enter your password\"\r\n        value={formik.values.password}\r\n        onChange={formik.handleChange}\r\n        errorText={formik.touched.password && formik.errors.password}\r\n        name=\"password\"\r\n      />\r\n      <button className=\"btn\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { memo, useMemo } from \"react\";\r\n\r\n/**\r\n * @typedef {Object} utlis\r\n * @property {string} title\r\n * @property  {\"input\"|\"textarea\"} elementType - input style most be input or textarea\r\n * @property {React.HTMLAttributes<HTMLLabelElement>} labelProps\r\n * @property {string} errorText\r\n * @property {React.HTMLAttributes<HTMLParagraphElement>} helperTextProps\r\n * @property {React.HTMLAttributes<HTMLDivElement>} containerProps\r\n */\r\n\r\n/**\r\n * @param {React.InputHTMLAttributes<HTMLInputElement> & utlis} props\r\n */\r\nconst Input = ({\r\n  title,\r\n  labelProps,\r\n  errorText,\r\n  helperTextProps,\r\n  containerProps,\r\n  elementType,\r\n  ...props\r\n}) => {\r\n  const divContainerClassName = useMemo(() => {\r\n    return `${errorText ? \"faild-error\" : \"\"} ${\r\n      containerProps?.className || \"\"\r\n    }`;\r\n  }, [errorText, containerProps]);\r\n\r\n  return (\r\n    <div {...containerProps} className={divContainerClassName + \"inp\"}>\r\n      {title && (\r\n        <label htmlFor={props.name} {...labelProps}>\r\n          {title}\r\n        </label>\r\n      )}\r\n      {elementType === \"textarea\" ? (\r\n        <textarea id={props.name} type=\"text\" {...props}></textarea>\r\n      ) : (\r\n        <input id={props.name} type=\"text\" {...props} />\r\n      )}\r\n\r\n      {errorText && (\r\n        <p className=\"color-red\" {...helperTextProps}>\r\n          {errorText}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Input);\r\n"],"names":["Yup","username","min","required","password","Login","nav","useNavigate","login","useAuth","mutation","useMutation","mutationKey","mutationFn","async","data","axiosInstance","post","values","onSuccess","formik","useFormik","initialValues","validationSchema","loginSchema","onSubmit","mutate","_jsxs","className","handleSubmit","children","_jsx","Input","title","placeholder","value","onChange","handleChange","errorText","touched","errors","name","type","_ref","labelProps","helperTextProps","containerProps","elementType","props","_objectWithoutProperties","_excluded","divContainerClassName","useMemo","concat","_objectSpread","htmlFor","id","memo"],"sourceRoot":""}