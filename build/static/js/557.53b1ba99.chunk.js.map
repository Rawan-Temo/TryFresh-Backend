{"version":3,"file":"static/js/557.53b1ba99.chunk.js","mappings":"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","sources":["utils/dateFormatter.js","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/use-debounce/src/useDebounce.ts","components/inputs/Input.jsx","components/formContainer/FormContainer.jsx","components/tableFilters/ConfrimAndRestBtns.jsx","components/table/TableHeader.jsx","components/table/TableBody.jsx","components/table/Paginations.jsx","components/popup/ConfirmPopUp.jsx","components/buttons/IconButton.jsx","components/tableFilters/TableFiltersContainer.jsx","components/table/TableToolBar.jsx","components/table/Table.jsx","components/buttons/Button.jsx","components/tableFilters/InputsContainer.jsx","components/popup/PopUp.jsx"],"sourcesContent":["/**\r\n * @param {string} date - The date string to format.\r\n * @param {\"justYear\"|\"fullDate\"} [format=\"justYear\"] - The format type.\r\n * @returns {string} The formatted date.\r\n */\r\nconst dateFormatter = (date, format = \"justYear\") => {\r\n  const time = new Date(date);\r\n  const year = time.getFullYear();\r\n  const month = String(time.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(time.getDate()).padStart(2, \"0\");\r\n  if (format === \"justYear\") return `${year}-${month}-${day}`;\r\n  const hoursFormat =\r\n    time.getHours() > 12 ? time.getHours() - 12 : time.getHours();\r\n  const at = time.getHours() > 12 ? \"PM\" : \"AM\";\r\n  const hours = String(hoursFormat).padStart(2, \"0\");\r\n  const minutes = String(time.getMinutes()).padStart(2, \"0\");\r\n  const seconds = String(time.getSeconds()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day} / ${hours}:${minutes}:${seconds} ${at}`;\r\n};\r\nexport default dateFormatter;\r\n","import {\n  useRef,\n  useEffect,\n  useMemo,\n  type Dispatch,\n  type SetStateAction,\n} from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.isPending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait?: number,\n  options?: Options,\n  forceUpdate?: Dispatch<SetStateAction<object>>\n): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const firstInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      firstInvokeTime.current = firstInvokeTime.current || time;\n\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n\n      if (leading && firstInvokeTime.current === lastInvokeTime.current) {\n        notifyManuallyTimerExpired();\n      }\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const notifyManuallyTimerExpired = () => {\n      if (forceUpdate) {\n        forceUpdate({});\n      }\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      const hadTimer = timerId.current;\n      if (hadTimer) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n\n      // Notify React to re-render when cancel is called and there was an active timer\n      if (hadTimer && forceUpdate) {\n        forceUpdate({});\n      }\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n    forceUpdate,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options,\n    forceUpdate\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import { memo, useMemo } from \"react\";\r\n\r\n/**\r\n * @typedef {Object} utlis\r\n * @property {string} title\r\n * @property  {\"input\"|\"textarea\"} elementType - input style most be input or textarea\r\n * @property {React.HTMLAttributes<HTMLLabelElement>} labelProps\r\n * @property {string} errorText\r\n * @property {React.HTMLAttributes<HTMLParagraphElement>} helperTextProps\r\n * @property {React.HTMLAttributes<HTMLDivElement>} containerProps\r\n */\r\n\r\n/**\r\n * @param {React.InputHTMLAttributes<HTMLInputElement> & utlis} props\r\n */\r\nconst Input = ({\r\n  title,\r\n  labelProps,\r\n  errorText,\r\n  helperTextProps,\r\n  containerProps,\r\n  elementType,\r\n  ...props\r\n}) => {\r\n  const divContainerClassName = useMemo(() => {\r\n    return `${errorText ? \"faild-error\" : \"\"} ${\r\n      containerProps?.className || \"\"\r\n    }`;\r\n  }, [errorText, containerProps]);\r\n\r\n  return (\r\n    <div {...containerProps} className={divContainerClassName + \"inp\"}>\r\n      {title && (\r\n        <label htmlFor={props.name} {...labelProps}>\r\n          {title}\r\n        </label>\r\n      )}\r\n      {elementType === \"textarea\" ? (\r\n        <textarea id={props.name} type=\"text\" {...props}></textarea>\r\n      ) : (\r\n        <input id={props.name} type=\"text\" {...props} />\r\n      )}\r\n\r\n      {errorText && (\r\n        <p className=\"color-red\" {...helperTextProps}>\r\n          {errorText}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Input);\r\n","import Button from \"../buttons/Button\";\r\nimport \"./form-container.css\";\r\n/**\r\n *\r\n * @typedef formProps\r\n * @property {string} header\r\n * @property {boolean} isUpdate\r\n * @property {()=> void} oncancel\r\n * @property {React.ButtonHTMLAttributes<HTMLButtonElement>} buttonProps\r\n * @param {formProps & React.FormHTMLAttributes<HTMLFormElement>} props\r\n */\r\n\r\nconst FormContainer = ({\r\n  header,\r\n  buttonProps,\r\n  children,\r\n  isUpdate,\r\n  oncancel,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <form {...props}>\r\n      {header && <h2>{header}</h2>}\r\n      {children}\r\n      <div className=\"form-actions\">\r\n        <Button\r\n          btnType=\"main\"\r\n          btnStyleType=\"contained\"\r\n          type=\"submit\"\r\n          {...buttonProps}\r\n        >\r\n          save\r\n        </Button>\r\n        {isUpdate && (\r\n          <Button\r\n            type=\"button\"\r\n            btnType=\"cancel\"\r\n            btnStyleType=\"outlined\"\r\n            onClick={oncancel}\r\n          >\r\n            cancel\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","import { memo, useCallback } from \"react\";\r\n// import Button from \"../buttons/Button\";\r\n\r\nconst ConfrimAndRestBtns = ({ values, resetForm, setFilters }) => {\r\n  const handleFiltersChange = useCallback(() => {\r\n    setFilters(values);\r\n  }, [setFilters, values]);\r\n  const handleFiltersReset = useCallback(() => {\r\n    resetForm();\r\n  }, [resetForm]);\r\n  return (\r\n    <div>\r\n      {/* <Button btnType=\"save\" onClick={handleFiltersChange}> */}\r\n      <i className=\"fa-solid fa-check\"></i> save filters\r\n      {/* </Button> */}\r\n      {/* <Button btnType=\"delete\" onClick={handleFiltersReset}> */}\r\n      <i className=\"fa-solid fa-rotate-right\"></i> reset filters\r\n      {/* </Button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ConfrimAndRestBtns);\r\n","import { memo, useCallback, useMemo } from \"react\";\r\n\r\nconst TableHeader = ({\r\n  selectable,\r\n  setSelectedItems,\r\n  selectedItems,\r\n  column,\r\n  setSort,\r\n  data,\r\n}) => {\r\n  const updateSortStatus = useCallback(\r\n    (column, e) => {\r\n      setSort((prev) => {\r\n        const prevStatus = prev[column.name]?.startsWith(\"-\");\r\n        e.target.parentElement.className = prevStatus ? \"a-z\" : \"z-a\";\r\n        return {\r\n          ...prev,\r\n          [column.name]: `${prevStatus ? \"\" : \"-\"}${column.name}`,\r\n        };\r\n      });\r\n    },\r\n    [setSort]\r\n  );\r\n  const isAllSelected =\r\n    selectedItems?.size === data?.length && data?.length !== 0;\r\n  const header = useMemo(\r\n    () =>\r\n      column?.map(\r\n        (th) =>\r\n          !th.hidden && (\r\n            <th key={th.headerName}>\r\n              {typeof th.headerName === \"function\"\r\n                ? th.headerName()\r\n                : th.headerName}\r\n              {th.sort && (\r\n                <i\r\n                  className=\"fa-solid fa-chevron-right sort\"\r\n                  onClick={(e) => {\r\n                    updateSortStatus(th, e);\r\n                  }}\r\n                ></i>\r\n              )}\r\n            </th>\r\n          )\r\n      ),\r\n    [column, updateSortStatus]\r\n  );\r\n\r\n  const selectAll = useCallback(() => {\r\n    if (!data) return;\r\n    setSelectedItems(() => {\r\n      if (isAllSelected) return new Set();\r\n      else {\r\n        const ids = data?.map((id) => id._id);\r\n        return new Set([...ids]);\r\n      }\r\n    });\r\n  }, [data, setSelectedItems, isAllSelected]);\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {selectable && (\r\n          <th>\r\n            <div\r\n              className={`${isAllSelected ? \"active\" : \"\"} checkbox select-all`}\r\n              onClick={selectAll}\r\n            />\r\n          </th>\r\n        )}\r\n        {header}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default memo(TableHeader);\r\n","import { memo, useCallback, useMemo, useState } from \"react\";\r\n\r\nconst TableBody = ({\r\n  loading,\r\n  column,\r\n  data,\r\n  selectable,\r\n  selectedItems,\r\n  setSelectedItems,\r\n  setIsPopUpOpen,\r\n  isPopUpOpen,\r\n  returnRow,\r\n}) => {\r\n  const [isCustomPopUpOpen, setIsCustomPopUpOpen] = useState(false);\r\n\r\n  const selectRowId = useCallback(\r\n    (id) => {\r\n      setSelectedItems((prev) => {\r\n        const newIds = new Set(prev);\r\n        if (newIds.has(id)) newIds.delete(id);\r\n        else newIds.add(id);\r\n        return newIds;\r\n      });\r\n    },\r\n    [setSelectedItems]\r\n  );\r\n\r\n  const renderCell = useCallback(\r\n    (column, row) => {\r\n      if (column.getCell) {\r\n        return column.getCell({\r\n          row,\r\n          setSelectedItems,\r\n          setIsPopUpOpen,\r\n          isPopUpOpen,\r\n          isCustomPopUpOpen,\r\n          setIsCustomPopUpOpen,\r\n          returnRow,\r\n        });\r\n      }\r\n      return row[column.name];\r\n    },\r\n    [\r\n      setSelectedItems,\r\n      setIsPopUpOpen,\r\n      isPopUpOpen,\r\n      isCustomPopUpOpen,\r\n      setIsCustomPopUpOpen,\r\n      returnRow,\r\n    ]\r\n  );\r\n\r\n  const rows = useMemo(\r\n    () =>\r\n      data?.map((row) => (\r\n        <tr key={row._id}>\r\n          {selectable && (\r\n            <td>\r\n              <div\r\n                onClick={() => selectRowId(row._id)}\r\n                className={`checkbox ${\r\n                  selectedItems?.has(row._id) ? \"active\" : \"\"\r\n                }`}\r\n              ></div>\r\n            </td>\r\n          )}\r\n          {column?.map(\r\n            (column) =>\r\n              !column.hidden && (\r\n                <td key={column.name} className={column.className}>\r\n                  {renderCell(column, row)}\r\n                </td>\r\n              )\r\n          )}\r\n        </tr>\r\n      )),\r\n    [data, column, renderCell, selectable, selectedItems, selectRowId]\r\n  );\r\n\r\n  const visibleColumnsCount = useMemo(() => {\r\n    return column?.filter((col) => !col.hidden).length + (selectable ? 1 : 0);\r\n  }, [column, selectable]);\r\n\r\n  return (\r\n    <tbody className={loading || rows ? \"relative\" : \"\"}>\r\n      {loading ? (\r\n        <tr>\r\n          <td className=\"table-loading\" colSpan={visibleColumnsCount}>\r\n            loading ...\r\n          </td>\r\n        </tr>\r\n      ) : rows?.length > 0 ? (\r\n        <>{rows}</>\r\n      ) : (\r\n        <tr>\r\n          <td className=\"no-data\" colSpan={visibleColumnsCount}>\r\n            no data found\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default memo(TableBody);\r\n","import { memo, useCallback, useMemo } from \"react\";\r\n// import Button from \"../buttons/Button\";\r\n\r\nconst getVisiblePages = (currentPage, totalPages, maxVisibleNeighbors = 2) => {\r\n  const pages = [];\r\n  if (currentPage > 3 + maxVisibleNeighbors) {\r\n    pages.push(1, 2, \"...\");\r\n  } else {\r\n    for (let i = 1; i < Math.min(3, totalPages + 1); i++) {\r\n      pages.push(i);\r\n    }\r\n  }\r\n\r\n  for (\r\n    let i = Math.max(1, currentPage - maxVisibleNeighbors);\r\n    i <= Math.min(totalPages, currentPage + maxVisibleNeighbors);\r\n    i++\r\n  ) {\r\n    if (!pages.includes(i)) pages.push(i);\r\n  }\r\n\r\n  if (currentPage < totalPages - 4) {\r\n    pages.push(\"...\", totalPages - 1, totalPages);\r\n  } else {\r\n    for (let i = Math.max(totalPages - 3, 1); i <= totalPages; i++) {\r\n      if (!pages.includes(i) && i > currentPage) pages.push(i);\r\n    }\r\n  }\r\n\r\n  return pages;\r\n};\r\n\r\nconst Paginations = ({\r\n  currentPage,\r\n  dataLength = 0,\r\n  setPage,\r\n  setSelectedItems,\r\n}) => {\r\n  const pages = useMemo(() => {\r\n    const pagesCount = Math.ceil(dataLength / 10);\r\n    return getVisiblePages(currentPage, pagesCount);\r\n  }, [dataLength, currentPage]);\r\n  const onPageChange = useCallback(\r\n    (page) => {\r\n      setPage(page);\r\n      setSelectedItems(new Set());\r\n    },\r\n    [setPage, setSelectedItems]\r\n  );\r\n\r\n  const getNextPage = useCallback(() => {\r\n    setPage((prev) => prev + 1);\r\n  }, [setPage]);\r\n  const getPrevPage = useCallback(() => {\r\n    setPage((prev) => prev - 1);\r\n  }, [setPage]);\r\n\r\n  return (\r\n    <footer className=\"pagination\">\r\n      <div className=\"page-container\">\r\n        {/* {dataLength > 0 && (\r\n          <Button\r\n            disabled={currentPage === 1}\r\n            onClick={getPrevPage}\r\n            btnType=\"cancel\"\r\n            btnStyleType=\"outlined\"\r\n          >\r\n            <i className=\"fa-solid fa-chevron-left\" />\r\n          </Button>\r\n        )} */}\r\n        {pages?.map((page) =>\r\n          typeof page === \"number\" ? (\r\n            <button\r\n              disabled={currentPage === page}\r\n              onClick={() => onPageChange(page)}\r\n              key={page}\r\n            >\r\n              {page}\r\n            </button>\r\n          ) : (\r\n            <span key={page}> {page} </span>\r\n          )\r\n        )}\r\n        {/* {dataLength > 0 && (\r\n          <Button\r\n            disabled={pages[pages?.length - 1] === currentPage}\r\n            onClick={getNextPage}\r\n            btnType=\"cancel\"\r\n            btnStyleType=\"outlined\"\r\n          >\r\n            <i className=\"fa-solid fa-chevron-right\" />\r\n          </Button>\r\n        )} */}\r\n      </div>\r\n      {dataLength > 0 && (\r\n        <h2>\r\n          number of data : <span>{dataLength}</span>\r\n        </h2>\r\n      )}\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Paginations);\r\n","import { memo } from \"react\";\r\n// import Button from \"../buttons/Button\";\r\nimport \"./popups.css\";\r\nimport Button from \"../buttons/Button\";\r\n\r\n/**\r\n * @typedef {Object} divProps\r\n * @property {boolean} isOpen\r\n * @property {string} [heading]\r\n * @property {string} [confirmText]\r\n * @property {string} [cancelText]\r\n * @property {() => void} [onConfirm]\r\n * @property {() => void} [onClose]\r\n * @property {React.ButtonHTMLAttributes<HTMLButtonElement>} [confirmButtonProps]\r\n * @property {React.ButtonHTMLAttributes<HTMLButtonElement>} [closeButtonProps]\r\n */\r\n\r\n/**\r\n * @param {divProps} props\r\n */\r\nconst ConfirmPopUp = ({\r\n  isOpen = false,\r\n  heading = \"\",\r\n  confirmText = \"\",\r\n  cancelText = \"\",\r\n  onConfirm = () => {},\r\n  onClose = () => {},\r\n  confirmButtonProps = {},\r\n  closeButtonProps = {},\r\n  ...props\r\n}) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"overlay\" role=\"dialog\" {...props} onClick={onClose}>\r\n      <div className=\"popup\">\r\n        <h1>{heading || \"هل انت متأكد من القيام بذلك؟\"}</h1>\r\n        <div>\r\n          <Button {...confirmButtonProps} onClick={onConfirm} type=\"button\">\r\n            {confirmText || \"نعم\"}\r\n          </Button>\r\n          <Button\r\n            {...closeButtonProps}\r\n            onClick={onClose}\r\n            btnType=\"delete\"\r\n            type=\"button\"\r\n          >\r\n            {cancelText || \"لا\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ConfirmPopUp);\r\n","import { useMemo } from \"react\";\r\nimport \"./button.css\";\r\n/**\r\n * @typedef {Object} IconButtonProps\r\n * @property {string} [className]\r\n * @property {string} [title]\r\n * @property {\"top\" | \"bottom\" | \"left\" | \"right\"} [placement]\r\n * @property {\"body-color\" | \"secondry-color\" | \"main\"} [color]\r\n */\r\n\r\n/**\r\n * @param {IconButtonProps & React.HTMLAttributes<HTMLButtonElement>} props\r\n */\r\n\r\nconst IconButton = ({\r\n  children,\r\n  className,\r\n  title,\r\n  placement = \"bottom\",\r\n  color = \"body-color\",\r\n  ...props\r\n}) => {\r\n  const classNameMemo = useMemo(\r\n    () => `${className || \"\"} ${color} icon-button`,\r\n    [className, color]\r\n  );\r\n  return (\r\n    <button type={props.type || \"button\"} {...props} className={classNameMemo}>\r\n      {children}\r\n      {title && <p className={`${placement} icon-button-hover`}> {title} </p>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default IconButton;\r\n","import { memo, useMemo } from \"react\";\r\n\r\nconst TableFiltersContainer = ({ isOpen, children }) => {\r\n  const containerClassName = useMemo(\r\n    () => `filters-container ${isOpen ? \"open\" : \"\"}`,\r\n    [isOpen]\r\n  );\r\n  return <div className={containerClassName}> {children} </div>;\r\n};\r\n\r\nexport default memo(TableFiltersContainer);\r\n","import { Link } from \"react-router\";\r\nimport IconButton from \"../buttons/IconButton\";\r\nimport { memo, useCallback, useMemo, useState } from \"react\";\r\nimport TableFiltersContainer from \"../tableFilters/TableFiltersContainer\";\r\n\r\nconst TableToolBar = ({\r\n  children,\r\n  heading,\r\n  columns,\r\n  setColumns,\r\n  hideDeleteIcon,\r\n  addDataRoute,\r\n  selectedItems,\r\n  setIsPopUpOpen,\r\n  addIcons,\r\n  setSearch,\r\n  hidefilterIcon,\r\n}) => {\r\n  const handleDeleteClick = useCallback(\r\n    () => setIsPopUpOpen(true),\r\n    [setIsPopUpOpen]\r\n  );\r\n  const deleteClassName = useMemo(\r\n    () => `fa-solid fa-trash ${selectedItems?.size > 0 ? \"color-red\" : \"\"}`,\r\n    [selectedItems.size]\r\n  );\r\n  const [filterArea, setFiltersArea] = useState(false);\r\n  const toggelFiltersArea = useCallback(\r\n    () => setFiltersArea((prev) => !prev),\r\n    []\r\n  );\r\n  const filtersIconColor = useMemo(\r\n    () => (filterArea ? \"main\" : \"secondry-color\"),\r\n    [filterArea]\r\n  );\r\n  return (\r\n    <>\r\n      <header className=\"table-toolbar\">\r\n        {heading && <h2>{heading}</h2>}\r\n        <div className=\"icons-container\">\r\n          <label htmlFor=\"search\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"search\"\r\n              placeholder=\"search for\"\r\n              onInput={(e) => setSearch(e.target.value)}\r\n            />\r\n            <i className=\"fa-solid fa-magnifying-glass\" />\r\n          </label>\r\n          {!hideDeleteIcon && (\r\n            <IconButton\r\n              placement=\"bottom\"\r\n              disabled={selectedItems?.size === 0}\r\n              title=\"delete\"\r\n              color=\"secondry-color\"\r\n            >\r\n              <i onClick={handleDeleteClick} className={deleteClassName} />\r\n            </IconButton>\r\n          )}\r\n          {addDataRoute && (\r\n            <IconButton placement=\"bottom\" title=\"add\" color=\"secondry-color\">\r\n              <Link to={addDataRoute} className=\"fa-solid fa-plus\" />\r\n            </IconButton>\r\n          )}\r\n          {!hidefilterIcon && (\r\n            <IconButton\r\n              onClick={toggelFiltersArea}\r\n              placement=\"bottom\"\r\n              title=\"filters\"\r\n              color={filtersIconColor}\r\n            >\r\n              <i className=\"fa-solid fa-filter\" />\r\n            </IconButton>\r\n          )}\r\n          {addIcons}\r\n          <ShowRows columns={columns} setColumns={setColumns} />\r\n        </div>\r\n      </header>\r\n      {!hidefilterIcon && (\r\n        <TableFiltersContainer isOpen={filterArea}>\r\n          {children}\r\n        </TableFiltersContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(TableToolBar);\r\n\r\nconst ShowRows = ({ columns, setColumns }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const updateRows = useCallback(\r\n    (column) => {\r\n      const updated = columns?.map((col) =>\r\n        col.name === column.name ? { ...col, hidden: !col.hidden } : col\r\n      );\r\n      setColumns(updated);\r\n    },\r\n    [columns, setColumns]\r\n  );\r\n  const inputs = useMemo(\r\n    () =>\r\n      columns?.map((column) => {\r\n        const headerName =\r\n          typeof column.headerName === \"function\"\r\n            ? column.headerName()\r\n            : column.headerName;\r\n        return (\r\n          (!column.allowedTo || column.allowedTo?.includes(\"admin\")) &&\r\n          (!search ? (\r\n            <div key={column.name}>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={column.name}\r\n                checked={!column.hidden}\r\n                onChange={() => updateRows(column)}\r\n              />\r\n              <label htmlFor={column.name}>{headerName}</label>\r\n            </div>\r\n          ) : (\r\n            (column.name.includes(search) || headerName.includes(search)) && (\r\n              <div key={column.name}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={column.name}\r\n                  checked={!column.hidden}\r\n                  onChange={() => updateRows(column)}\r\n                />\r\n                <label htmlFor={column.name}>{headerName}</label>\r\n              </div>\r\n            )\r\n          ))\r\n        );\r\n      }),\r\n    [columns, updateRows, search]\r\n  );\r\n\r\n  return (\r\n    <div className=\"show-rows relative\">\r\n      <IconButton placement=\"bottom\" title=\"rows\" color=\"secondry-color\">\r\n        <i\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            document\r\n              .querySelector(\".show-rows > article\")\r\n              .classList.toggle(\"active\");\r\n          }}\r\n          className=\"fa-solid fa-ellipsis-vertical\"\r\n        />\r\n      </IconButton>\r\n\r\n      <article onClick={(e) => e.stopPropagation()}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search\"\r\n          placeholder={\"search for row\"}\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value.toLowerCase())}\r\n        />\r\n        {inputs}\r\n        <h4>\r\n          rows avaible: <span> {inputs?.length}</span>\r\n        </h4>\r\n      </article>\r\n    </div>\r\n  );\r\n};\r\n\r\ndocument.addEventListener(\"click\", () => {\r\n  const rowDiv = document.querySelector(\".show-rows > article.active\");\r\n  rowDiv?.classList.remove(\"active\");\r\n});\r\n","import { memo, useCallback, useMemo, useState } from \"react\";\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableBody from \"./TableBody\";\r\nimport \"./table.css\";\r\nimport Paginations from \"./Paginations\";\r\nimport ConfirmPopUp from \"./../popup/ConfirmPopUp\";\r\nimport APIClient from \"../../utils/ApiClient\";\r\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport TableToolBar from \"./TableToolBar\";\r\n\r\n/**\r\n * @typedef TableProps\r\n * @property {Array<object>} colmuns أعمدة الجدول\r\n * @property {boolean} selectable هل يمكن تحديد الصفوف\r\n * @property {boolean} loading حالة التحميل\r\n * @property {boolean} hidefilterIcon\r\n * @property {number} currentPage رقم الصفحة الحالية\r\n * @property {(page: number) => void} setPage دالة لتغيير الصفحة\r\n * @property {Array<object>} data بيانات الجدول\r\n * @property {number} dataLength عدد البيانات الكلي (لأجل الـ Pagination)\r\n * @property {(sort: any) => void} setSort دالة لتحديد الفرز\r\n * @property {(search: string) => void} setSearch دالة للبحث\r\n * @property {Set<string|number>} selectedItems العناصر المحددة\r\n * @property {(items: Set<string|number>) => void} setSelectedItems دالة لتغيير العناصر المحددة\r\n * @property {string} delelteEndPoint رابط الـ API لحذف البيانات\r\n * @property {string} queryKey مفتاح الكاش الخاص بـ react-query\r\n * @property {string} heading عنوان الجدول\r\n * @property {boolean} hideDeleteIconOnToolBar إخفاء أيقونة الحذف من شريط الأدوات\r\n * @property {string} [addDataRoute] رابط إضافة البيانات (اختياري)\r\n * @property {Array<React.ReactNode>} [addIcons] أيقونات إضافية على شريط الأدوات\r\n * @property {React.ReactNode} [children] عناصر إضافية يتم عرضها داخل الـ TableToolBar\r\n * @property {() => void} returnRow\r\n */\r\n\r\n/**\r\n * @param {TableProps} props\r\n */\r\n\r\nconst Table = ({\r\n  colmuns,\r\n  selectable,\r\n  loading,\r\n  currentPage,\r\n  setPage,\r\n  data,\r\n  dataLength,\r\n  setSort,\r\n  selectedItems,\r\n  setSelectedItems,\r\n  delelteEndPoint,\r\n  queryKey,\r\n  heading,\r\n  hideDeleteIconOnToolBar,\r\n  addDataRoute,\r\n  addIcons,\r\n  children,\r\n  setSearch,\r\n  hidefilterIcon,\r\n  returnRow,\r\n}) => {\r\n  const [columnsState, setColumnsState] = useState(colmuns || []);\r\n\r\n  const [isPopUpOpen, setIsPopUpOpen] = useState(false);\r\n\r\n  const handleDeletePopUpClose = useCallback(() => {\r\n    setSelectedItems(new Set());\r\n    setIsPopUpOpen(false);\r\n  }, [setSelectedItems]);\r\n\r\n  const apiClient = useMemo(\r\n    () => new APIClient(delelteEndPoint),\r\n    [delelteEndPoint]\r\n  );\r\n\r\n  const queryclient = useQueryClient();\r\n\r\n  const handleDelete = useMutation({\r\n    mutationKey: [queryKey],\r\n    mutationFn: (data) => apiClient.deleteAll({ ids: data }),\r\n    onSuccess: () => {\r\n      if (data?.length === selectedItems?.size) {\r\n        setPage((prev) => (prev === 1 ? prev : prev - 1));\r\n      }\r\n      setIsPopUpOpen(false);\r\n      setSelectedItems(new Set());\r\n      queryclient.invalidateQueries({\r\n        queryKey: [queryKey],\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleConfirmDelete = useCallback(() => {\r\n    handleDelete.mutate([...selectedItems]);\r\n  }, [handleDelete, selectedItems]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table-container\">\r\n        <TableToolBar\r\n          heading={heading}\r\n          columns={columnsState}\r\n          setColumns={setColumnsState}\r\n          hideDeleteIcon={hideDeleteIconOnToolBar}\r\n          addDataRoute={addDataRoute}\r\n          selectedItems={selectedItems}\r\n          setIsPopUpOpen={setIsPopUpOpen}\r\n          addIcons={addIcons}\r\n          children={children}\r\n          setSearch={setSearch}\r\n          hidefilterIcon={hidefilterIcon}\r\n        />\r\n\r\n        <div className=\"table\">\r\n          <table>\r\n            <TableHeader\r\n              selectable={selectable}\r\n              setSelectedItems={setSelectedItems}\r\n              column={columnsState}\r\n              setSort={setSort}\r\n              data={data}\r\n              selectedItems={selectedItems}\r\n            />\r\n            <TableBody\r\n              loading={loading}\r\n              column={columnsState}\r\n              data={data}\r\n              selectable={selectable}\r\n              selectedItems={selectedItems}\r\n              setSelectedItems={setSelectedItems}\r\n              setIsPopUpOpen={setIsPopUpOpen}\r\n              isPopUpOpen={isPopUpOpen}\r\n              returnRow={returnRow}\r\n            />\r\n          </table>\r\n        </div>\r\n        <Paginations\r\n          currentPage={currentPage}\r\n          dataLength={dataLength}\r\n          setPage={setPage}\r\n          setSelectedItems={setSelectedItems}\r\n        />\r\n      </div>\r\n\r\n      <ConfirmPopUp\r\n        isOpen={isPopUpOpen}\r\n        onClose={handleDeletePopUpClose}\r\n        onConfirm={handleConfirmDelete}\r\n        confirmButtonProps={{ isSending: handleDelete.isLoading }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Table);\r\n","import { memo, useMemo } from \"react\";\r\nimport \"./button.css\";\r\n\r\n/**\r\n * @typedef {Object} Utils\r\n * @property {boolean} disabled\r\n * @property {boolean} isSending\r\n * @property {string} isSendingText\r\n * @property {string} className\r\n * @property {\"contained\" | \"outlined\"} btnStyleType\r\n * @property {\"delete\" | \"main\" | \"save\" | \"cancel\"} btnType\r\n */\r\n\r\n/**\r\n * @param {Utils & React.ButtonHTMLAttributes<HTMLButtonElement>} ButtonProps\r\n */\r\nconst Button = ({\r\n  disabled = false,\r\n  isSending = false,\r\n  isSendingText = \"\",\r\n  children,\r\n  btnStyleType = \"contained\",\r\n  btnType = \"main\",\r\n  className = \"\",\r\n  ...props\r\n}) => {\r\n  const buttonClassName = useMemo(\r\n    () =>\r\n      `btn ${isSending ? \"sending\" : \"\"} ${\r\n        btnStyleType || \"contained\"\r\n      } ${btnType} ${className || \"\"}`,\r\n    [className, isSending, btnStyleType, btnType]\r\n  );\r\n\r\n  const buttonText = useMemo(\r\n    () => (isSending ? `${isSendingText || \"sending\"} ...` : children),\r\n    [isSending, isSendingText, children]\r\n  );\r\n\r\n  return (\r\n    <button\r\n      disabled={disabled || isSending}\r\n      className={buttonClassName}\r\n      {...props}\r\n    >\r\n      {isSending && <article className=\"btn-loader\" />}\r\n      {buttonText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(Button);\r\n","import { memo } from \"react\";\r\n\r\nconst InputsContainer = ({ children, ...props }) => {\r\n  return <div {...props}>{children}</div>;\r\n};\r\n\r\nexport default memo(InputsContainer);\r\n","/**\r\n * @typedef {Object} divProps\r\n * @property {boolean} isOpen\r\n * @property {() => void} [onClose]\r\n */\r\n\r\nimport { memo, useMemo } from \"react\";\r\n\r\n/**\r\n * @param {divProps & React.HTMLAttributes<HTMLDivElement>} props\r\n */\r\nconst PopUp = ({\r\n  isOpen = false,\r\n  onClose = () => {},\r\n  className,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const popupClassName = useMemo(() => `popup ${className || \"\"}`, [className]);\r\n  if (isOpen)\r\n    return (\r\n      <div className=\"overlay\" onClick={onClose}>\r\n        <div className={popupClassName} {...props}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default memo(PopUp);\r\n"],"names":["date","format","arguments","length","undefined","time","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","hoursFormat","getHours","at","hours","minutes","getMinutes","seconds","getSeconds","c","e","u","i","a","o","r","f","l","v","m","d","g","p","w","current","s","window","x","TypeError","h","leading","y","trailing","F","A","debounceOnServer","D","Math","max","maxWait","n","T","t","apply","cancelAnimationFrame","requestAnimationFrame","setTimeout","now","min","W","slice","call","cancel","clearTimeout","isPending","flush","equalityFn","Input","_ref","title","labelProps","errorText","helperTextProps","containerProps","elementType","props","_objectWithoutProperties","_excluded","divContainerClassName","useMemo","className","_jsxs","_objectSpread","children","_jsx","htmlFor","name","id","type","memo","header","buttonProps","isUpdate","oncancel","Button","btnType","btnStyleType","onClick","ConfrimAndRestBtns","values","resetForm","setFilters","useCallback","TableHeader","selectable","setSelectedItems","selectedItems","column","setSort","data","updateSortStatus","prev","_prev$column$name","prevStatus","startsWith","target","parentElement","isAllSelected","size","map","th","hidden","headerName","sort","selectAll","Set","ids","_id","TableBody","loading","setIsPopUpOpen","isPopUpOpen","returnRow","isCustomPopUpOpen","setIsCustomPopUpOpen","useState","selectRowId","newIds","has","delete","add","renderCell","row","getCell","rows","visibleColumnsCount","filter","col","colSpan","_Fragment","Paginations","currentPage","dataLength","setPage","pages","pagesCount","ceil","totalPages","maxVisibleNeighbors","push","includes","getVisiblePages","onPageChange","page","disabled","ConfirmPopUp","isOpen","heading","confirmText","cancelText","onConfirm","onClose","confirmButtonProps","closeButtonProps","role","placement","color","classNameMemo","TableFiltersContainer","containerClassName","TableToolBar","columns","setColumns","hideDeleteIcon","addDataRoute","addIcons","setSearch","hidefilterIcon","handleDeleteClick","deleteClassName","filterArea","setFiltersArea","toggelFiltersArea","filtersIconColor","placeholder","onInput","value","IconButton","Link","to","ShowRows","_ref2","search","updateRows","updated","inputs","_column$allowedTo","allowedTo","checked","onChange","stopPropagation","document","querySelector","classList","toggle","toLowerCase","addEventListener","rowDiv","remove","Table","colmuns","delelteEndPoint","queryKey","hideDeleteIconOnToolBar","columnsState","setColumnsState","handleDeletePopUpClose","apiClient","APIClient","queryclient","useQueryClient","handleDelete","useMutation","mutationKey","mutationFn","deleteAll","onSuccess","invalidateQueries","handleConfirmDelete","mutate","isSending","isLoading","isSendingText","buttonClassName","buttonText","InputsContainer","PopUp","popupClassName"],"sourceRoot":""}